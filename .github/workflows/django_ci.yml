name: Django CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Let's stick to one version for simplicity and speed

    # --- SERVICES ---
    # This sets up a PostgreSQL database container that our job can connect to.
    services:
      postgres:
        image: postgres:13 # Use a specific version of Postgres
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        # We need to give it a health check to ensure it's ready before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # --- Django Settings ---
      SECRET_KEY: 'a-dummy-secret-key-that-is-long-enough-for-ci'
      DEBUG: 'False'
      
      # --- Database Settings ---
      # These must match the 'services' configuration above
      PREFERRED_DB: 'postgres'
      DB_NAME: 'test_db'
      DB_USER: 'test_user'
      DB_PASSWORD: 'test_password'
      DB_HOST: 'localhost' # The service is mapped to localhost in the runner
      DB_PORT: '5432' # The default port is mapped

      # Dummy Google Credentials
      GOOGLE_CLIENT_ID: 'dummy-google-client-id'
      GOOGLE_CLIENT_SECRET: 'dummy-google-client-secret'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install PostgreSQL client
      # The runner needs the pg_config command to build the psycopg2 package
      run: sudo apt-get update && sudo apt-get install -y libpq-dev

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      # A small extra check to make sure the DB is fully available
      run: |
        until pg_isready -h localhost -p 5432 -U $DB_USER; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Tests
      run: |
        # We don't need to run migrate before test, the test runner handles it.
        python manage.py test
