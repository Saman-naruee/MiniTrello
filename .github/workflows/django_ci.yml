# A friendly name for our workflow, which will be shown on GitHub
name: Tests

# --- TRIGGER ---
# This workflow will run on every push or pull_request to the 'main' branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

# --- JOBS ---
# We have a single job named 'test'
jobs:
  test:
    # --- RUNNER ---
    # The type of virtual machine to run the job on. We use the latest Ubuntu.
    runs-on: ubuntu-latest
    
    # --- STRATEGY ---
    # Optional: Run tests against multiple Python versions
    strategy:
      matrix:
        python-version: ["3.11"]

    # --- ENVIRONMENT VARIABLES ---
    # We provide dummy secret values for our tests based on your .env.example.
    # The actual values don't matter for tests, as long as they are present.
    env:
      # Settings for Django
      SECRET_KEY: 'a-dummy-secret-key-that-is-long-enough-for-ci'
      DEBUG: 'False'
      ALLOWED_HOSTS: 'localhost,127.0.0.1'
      
      # Settings for the database (we will use SQLite in CI)
      PREFERRED_DB: 'sqlite'
      
      # Dummy Google Credentials
      GOOGLE_CLIENT_ID: 'dummy-google-client-id'
      GOOGLE_CLIENT_SECRET: 'dummy-google-client-secret'
      GOOGLE_PROJECT_API_KEY: 'dummy-google-api-key'

      # Application specific settings
      MAX_BOARDS_PER_USER: '10'

    # --- STEPS ---
    # A sequence of tasks that will be executed as part of the job
    steps:
    # Step 1: Check out the repository code under $GITHUB_WORKSPACE
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up the specific Python version from our matrix
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Or your requirements file
        # Install any test-specific deps, e.g., pytest

    # Step 4: Run the Django tests
    # This is the most important step! We use the 'development' settings for tests.
    - name: Migrate Database
      run: |
        python manage.py makemigrations
        python manage.py migrate
    - name: Run tests
      run: |
        python manage.py test  # Or pytest if using pytest-django
